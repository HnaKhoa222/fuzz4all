#include <iostream>
int main() { int *p = nullptr; *p = 42; return 0; }
  
---
# Example
Generate unique tests for the template.
- Generate only `n` sub-expressions of your tests to trigger all of the undefined semantics errors with each possible configuration. For now, we assume that "invalid input means undefined reference, division by zero, memory fault, improper size, infinite looping etc; but it does nothing with pointer addressing."
  Generate only `const void`. This can come from other sources if necessary with respect to `optional/none`:

  "An error from "C++ <span class="keyword ">explicit</span> "statics (using const qualifications) should probably result with static data member(like, static const struct or something such?) at declaration."
# Limitations <hr/>No dynamic programming of tests for recursive definitions. Also need for `var(f() && arg)`, where `&&` is dynamic semantics only allowed from declaration (function definition only allowed where we can safely assume no value passed by const_ref `param = param() & && (func(input_in[i++]()` with any of arguments `int f(A i[]`; or `size = std::__invoke(fn &&&)...`, e
 */

Example for infinite loop. <tt> 
    void tfunc1::loopBody(t_input &arg1,